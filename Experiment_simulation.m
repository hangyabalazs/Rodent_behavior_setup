function [Spikes, CleanEvents, NoisyEvents] = Experiment_simulation
%EXPERIMENT_SIMULATION   Simulate the effect of noise in event timing,
%   [SPIKES, CLEANEVENTS, NOISYEVENTS] = EXPERIMENT_SIMULATION generates a
%   simulated train of events (CLEANEVENTS) and a simulated spike train
%   (SPIKES), consisting of background Poisson spiking and 'evoked' spikes
%   following the simulated events according to a normal distribution of
%   response times. Next, new event trains are generated by adding
%   increasing Gaussian noise to the original event train (NOISYEVENTS).
%   The effect of noise in event timing on estimates of spike timing
%   reliability is tested.
%
%   Raster plots with peri-event time histograms (PETH) and cross-correlograms
%   between the event and spike trains are plotted. Time-shifted mutual
%   information is used to test general (non-linear) relationships between
%   event times and spikes.
%
%   See also MUTUAL_INFORMATION.

%   Nicola Solari and Balazs Hangya
%   Institute of Experimental Medicine, Budapest, Hungary
%   hangya.balazs@koki.mta.hu

% Parameters
mx = 10000000;   % data length in ms
esp = 1000;    % event spacing in ms
baselinerate = 10;   % baseline spike rate (Poisson) in Hz
nesp = 10;     % number of eveoked spikes per event (can be randomized later)
esp_lat = 300; % latency of evoked spikes in ms (Gaussian)
esp_jit = 100; % jitter of evoked spikes in ms (Gaussian)

% Simulate event train w/o noise
E = esp:esp:mx;
evnt = length(E); % number of events

% Simulate spike train
S1 = randpoisson(mx/1000*baselinerate,mx);    % generate background Poisson spiking
S2 = repmat(E,nesp,1) + esp_lat + randn(nesp,length(E)) * esp_jit;  % generate 'evoked' spikes
S2 = sort(S2(:))';
S = sort([S1 S2]);   % all spikes

% Curve fitting - parameters
a = 30;
c = 10;
m = 200;
s = 0.3;
s = fitoptions('Method','NonlinearLeastSquares',...   % non-linear least squares
    'Lower',[0,0,-Inf,-Inf],...    % lower bounds
    'Upper',[Inf,Inf,Inf,Inf],...   % upper bounds
    'Startpoint',[a,c,m,s],...   % initial values
    'Robust','on');    % robust fit
f = getmodel(s);

% Simulate event train w noise
SD = 0:10:100;
numLevels = length(SD);
[CCGmax, MImax] = deal(nan(1,numLevels));
NE = cell(1,numLevels);
for iLevels = 1:numLevels
    noise_SD = SD(iLevels);  % arbitrary value for distribution SD (the bigger the more noisy)
    noise = noise_SD .* randn(1,evnt);
    da_noise = round(noise);
    perturbed_E = E + da_noise;
    NE{iLevels} = perturbed_E;   % noisy events
    
    % Take the data before and after each event; plot spike raster, PETH and cross-correlogram
    n_window = 200;
    p_window = 600;
    [CCGmax(iLevels), MImax(iLevels)] = ...
        ccg_mi(perturbed_E,S,noise_SD,n_window,p_window,evnt,esp,mx,f,s);   % returns pseudo-event train for noisy events
end

% Plot CCG peak vs. noise
figure
hold on
ylabel('CCG peak');
xlabel('Noise SD');
cc = plot(SD,CCGmax,'Color',[0 0 0]);
cc(1).LineWidth = 2;
box off
set(gca,'TickDir','out');

% Plot MI peak vs. noise
figure
hold on
ylabel('MI peak');
xlabel('Noise SD');
ss = plot(SD,MImax,'Color',[0 0 0]);
ss(1).LineWidth = 2;
box off
set(gca,'TickDir','out');

% Output
Spikes = S;
CleanEvents = E;
NoisyEvents = NE;

% -------------------------------------------------------------------------
function [CCGmax, MImax] = ccg_mi(Ev,S,SD,n_window,p_window,evnt,esp,mx,f,s)

% Pre-align spikes
PerEvSpiks = struct('spikes',[],'event',[]);
SNo = 1000;    % SNo = evnt for full raster showing all events
for n = 1:SNo
    window = S(S>=(Ev(n)-n_window)&S<=(Ev(n)+p_window));
    zeroed = window - Ev(n);   % reset values of all windows around 0 for plotting
    dimension = numel(zeroed);
    yupsilon = repmat(n,1,dimension);
    PerEvSpiks(n).spikes = zeroed;   % chunks of spikes + and - X ms around the event
    PerEvSpiks(n).event = yupsilon;
end

% Create scatter data of the spikes and PETH
ultravectorX = horzcat(PerEvSpiks(:).spikes);
ultravectorY = horzcat(PerEvSpiks(:).event);
H1 = figure;   %#ok<NASGU> % raster plot and PSTH
A1 = subplot(2,1,1);
scatter(ultravectorX,ultravectorY,'.' , 'k')
xlim([-(n_window) p_window]); 
hold on
RR = plot([0 0],[0 SNo],'Color',[0.8 0 0]);
RR(1).LineWidth = 4;
hold off
A2 = subplot(2,1,2);
hist(ultravectorX,(n_window + p_window)+1) % alternatively, esp or t_window*2+1 for window size
yl = ylim;
hold on
rl = plot([0 0], [0 yl(2)],'Color', [0.8 0 0]);
rl(1).LineWidth = 3;
hold off
title(A1,['Noise SD: ' num2str(SD)])
linkaxes([A1 A2],'x')

% Plot events and spikes in time
pse = zeros(1,mx+1000);   % pseudo-event train
pse(ceil(Ev)) = 1;
psu = zeros(1,mx+1000);   % pseudo-spike train
psu(ceil(S)) = 1;
H2 = figure; %#ok<NASGU>
A1 = subplot(211);
l = plot(pse,'Color',[0.8 0 0]);
l(1).LineWidth = 3;
ylim([-0.2 1.2])
A2 = subplot(212);
ll = plot(psu,'k');
ll(1).LineWidth = 3;
ylim([-0.2 1.2])
linkaxes([A1 A2])
box off
set(gca,'xticklabel',[]);

% Cross-correlation
t_window = 600;
[R, lags] = xcorr(psu,pse,t_window);   % E -> U
[fun , ~] = fit(lags',R',f,s);
figure
c = plot(lags,R,'Color',[0 0 0.8]);
title(['Noise SD: ' num2str(SD)])
persistent CCG_Ymax
if isequal(SD,0)
    CCG_Ymax = max(R);
end
ylim ([0 (CCG_Ymax + 10)]);
xlim([-(n_window) p_window]);
c(1).LineWidth = 2;
hold on
L = plot(fun,'k');   % overlay the fitted curve
CCGmax = max(get(L,'YData'));
legend('hide');
L(1).LineWidth = 2;
hold on
yl = ylim;
rl = plot([0 0],[0 yl(2)],'Color',[0.8 0 0]);
rl(1).LineWidth = 3;
hold off
box off
set(gca,'TickDir','out');
ylabel('cross-correlation');
shift_title = ['Noise SD: ' num2str(SD)];

% Time-shifted mutual information
mi_values = mutualinfo_shifter_loop(SD,pse,psu,shift_title);
MImax = max(mi_values);

% -------------------------------------------------------------------------
function MIs = mutualinfo_shifter_loop(SD,eventi,shots,title_string)

% Fitting parameters
sp1a = 0;
sp1b = 300;
sp1c = 90;
sp2a = 0;
sp2b = -200;
sp2c = 250;
sp3a = 0;
sp3b = 600;
sp3c = 100;
fo = fitoptions('Method','NonlinearLeastSquares',...   % non-linear least squares
    'Lower',[-Inf,-Inf,0,-Inf,-Inf,0,-Inf,-Inf,0],...    % lower bounds
    'Upper',[Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf],...   % upper bounds
    'Startpoint',[sp1a,sp1b,sp1c,sp2a,sp2b,sp2c,sp3a,sp3b,sp3c],...   % initial values
    'Robust','on');    % robust fit

% Time-shifted MI
next = 0;
L = -200:10:600;
numIt = length(L);
MIs = zeros(1,numIt);
wb = waitbar(0,'Calculating mutual information...');    % progress indicator
global WB
WB(end+1) = wb;
for lag = L
    next = next + 1;
    shifted_pse = circshift(eventi,lag,2);
    MIs(next) = mutual_information(shifted_pse',shots');
    waitbar(next/numIt)
end
close(wb)

% Plot
[fun , ~] = fit(L',MIs','gauss3',fo);
figure;
p = plot(L,MIs);
persistent MIs_Ymax
if isequal(SD,0)
    MIs_Ymax = max(MIs);
end
ylim([0 (MIs_Ymax + (0.2e-05))]);
hold on
pp = plot(fun,'k');
legend('hide');
p(1).LineWidth = 2;
pp(1).LineWidth = 2;
hold on
yl = ylim;
rl = plot([0 0],[0 yl(2)],'Color',[0.8 0 0]);
rl(1).LineWidth = 3;
hold off
box off
set(gca,'TickDir','out');
xlabel('Time from event (ms)');
ylabel('Information (10^-^5 bits)');
if exist('title_string','var')
    title(title_string)
end

% -------------------------------------------------------------------------
function f = getmodel(s)

f = fittype('c+a*exp(-((x-m)/s)^2)','options',s);